# Setup Basic AutoScaling 
# - Create ELB , Auto Scaling Launch Config
# - Create Auto Scaling Launch Config
# - Create Auto Scaling Group
#
# Note, this is a basic use of Cloudformation with disregard for Security Group Access
# You should always update Security Group Access with your own IP Address to ensure your instances security.
#
# How to validate template
# aws cloudformation validate-template --template-body file:////path//cloudformation//AutoScaling//autoscaling-basic.yml
#
# How to Create/Update stack 
# aws cloudformation create-stack --stack-name myAutoScale --template-body file:////path//cloudformation//AutoScaling//autoscaling-basic.yml
# aws cloudformation update-stack --stack-name myAutoScale --template-body file:////path//cloudformation//AutoScaling//autoscaling-basic.yml
#
# How to Delete stack
# aws cloudformation delete-stack --stack-name myAutoScale
#
# Example with parameter
# aws cloudformation create-stack  --stack-name startmyinstance  
#    --template-body file://home/ec2-user/templates/startmyinstance.json 
#    --parameters  ParameterKey=KeyPairName,ParameterValue=MyKey ParameterKey=InstanceType,ParameterValue=t1.micro
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Example ELB Set-up AutoScaling Basic"

Parameters: 
  InstanceType: 
    Description: "Enter t2.micro or m1.small. Default is t2.micro."
    Type: "String"
    Default: "t2.micro"
    AllowedValues: 
      - "t2.micro"
      - "m1.small"

  KeyName:
    Description: "Enter an existing EC2 KeyPair. Default is MyEC2Key"
    Type: "String"
    Default: "MyEC2Key"

  SubnetsParameter:
    Description: "Subnets to launch instances into"
    Type: "List<AWS::EC2::Subnet::Id>"
    Default: "subnet-e47ed292"

  VPCParameter:
    Description: "VPC to launch instances into"
    Type: "AWS::EC2::VPC::Id"
    Default: 'vpc-4c3fc128'

# Mappings allow us to map a key to a corresponding set of named values
# So if our instance is brought up in the eu-west-1 region we can use
# AWS::Region to tell us the current zone and then use the intrinsic function
# Fn::FindInMap to return the relevant matched value
Mappings:
  RegionMap:
    eu-west-1:
      AMI: "ami-bff32ccc"
    ap-southeast-1:
      AMI: "ami-dc9339bf" # My-Default-AMI
    ap-southeast-2:
      AMI: "ami-48d38c2b"
    eu-central-1:
      AMI: "ami-bc5b48d0"
    ap-northeast-2:
      AMI: "ami-249b554a"
    ap-northeast-1:
      AMI: "ami-383c1956"
    us-east-1:
      AMI: "ami-0b33d91d"
    sa-east-1:
      AMI: "ami-6817af04"
    us-west-1:
      AMI: "ami-d5ea86b5"
    us-west-2:
      AMI: "ami-f0091d91"

Resources:
  ELBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "ELB-SG"
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
      - CidrIp: "0.0.0.0/0"
        FromPort: "80"
        IpProtocol: "tcp"
        ToPort: "80"
      VpcId:
        Ref: "VPCParameter"

  ELB:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties:
      ConnectionDrainingPolicy:
        Enabled: "true"
        Timeout: "30"
      CrossZone: "true"
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '10'
        Target: "HTTP:80/"
        Timeout: '5'
        UnhealthyThreshold: '2'
      LoadBalancerName: "elb"
      Listeners:
      - InstancePort: '80'
        InstanceProtocol: "HTTP"
        LoadBalancerPort: '80'
        Protocol: "HTTP"
      Scheme: "internet-facing"
      SecurityGroups:
      - Ref: "ELBSecurityGroup"
      Subnets:
        Ref: "SubnetsParameter"

  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "ec2-sg"
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
      - CidrIp: "0.0.0.0/0"
        FromPort: "22"
        IpProtocol: "tcp"
        ToPort: "22"
      - FromPort: "80"
        IpProtocol: "tcp"
        SourceSecurityGroupId:
          Ref: "ELBSecurityGroup"
        ToPort: "80"
      VpcId:
        Ref: "VPCParameter"

  # Auto Scaling Launch Configuration
  LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: "true"
      KeyName:
        Ref: "KeyName"
      ImageId:
        Fn::FindInMap:
        - "RegionMap"
        - Ref: "AWS::Region"
        - "AMI"
      InstanceType: "t2.micro"
      SecurityGroups:
      - Ref: "EC2SecurityGroup"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install httpd -y
          yum update -y
          service httpd start
          chkconfig httpd on
          echo "<html><h1>Hello Cloud Gurus!</h1></html>" > /var/www/html/index.html

  # Auto Scaling Group Basic Setup
  AutoScalingGroup: 
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties: 
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '1'
      LaunchConfigurationName:
        Ref: "LaunchConfiguration"
      VPCZoneIdentifier:
        Ref: "SubnetsParameter"
      LoadBalancerNames:
      - Ref: "ELB"
      HealthCheckGracePeriod: "300"
      HealthCheckType: "ELB"
      Tags:
      - Key: "Name"
        Value: "Webserver-AG"
        PropagateAtLaunch: 'true'

Outputs:
  ELB:
    Value:
      Fn::Join:
      - ''
      - - "http://"
        - Fn::GetAtt:
          - "ELB"
          - "DNSName"
    Description: "Load Balancer URL"