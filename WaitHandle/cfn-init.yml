# Setup Basic Wait Condition
#
# Note, this is a basic use of Cloudformation with disregard for Security Group Access
# You should always update Security Group Access with your own IP Address to ensure your instances security.
#
# How to validate template
# aws cloudformation validate-template --template-body file:////path//cloudformation//WaitHandle//cfn-init.yml
#
# How to Create/Update stack 
# aws cloudformation create-stack --stack-name myINIT --template-body file:////path//cloudformation//WaitHandle//cfn-init.yml
# aws cloudformation update-stack --stack-name myINIT --template-body file:////path//cloudformation//WaitHandle//cfn-init.yml
#
# How to Delete stack
# aws cloudformation delete-stack --stack-name myINIT
#
# Example with parameter
# aws cloudformation create-stack  --stack-name startmyinstance  
#    --template-body file://home/ec2-user/templates/startmyinstance.json 
#    --parameters  ParameterKey=KeyPairName,ParameterValue=MyKey ParameterKey=InstanceType,ParameterValue=t1.micro

---
AWSTemplateFormatVersion: '2010-09-09'

Parameters: 
  InstanceType: 
    Description: "Enter t2.micro or m1.small. Default is t2.micro."
    Type: "String"
    Default: "t2.micro"
    AllowedValues: 
      - "t2.micro"
      - "m1.small"
  KeyName:
    Description: "Enter an existing EC2 KeyPair. Default is MyEC2Key"
    Type: "String"
    Default: "MyEC2Key"

  VPCParameter:
    Description: "VPC to launch instances into"
    Type: "AWS::EC2::VPC::Id"
    Default: 'vpc-4c3fc128'

# Mappings allow us to map a key to a corresponding set of named values
# So if our instance is brought up in the eu-west-1 region we can use
# AWS::Region to tell us the current zone and then use the intrinsic function
# Fn::FindInMap to return the relevant matched value
Mappings:
  RegionMap:
    eu-west-1:
      AMI: "ami-bff32ccc"
    ap-southeast-1:
      AMI: "ami-dc9339bf" # My-Default-AMI
    ap-southeast-2:
      AMI: "ami-48d38c2b"
    eu-central-1:
      AMI: "ami-bc5b48d0"
    ap-northeast-2:
      AMI: "ami-249b554a"
    ap-northeast-1:
      AMI: "ami-383c1956"
    us-east-1:
      AMI: "ami-0b33d91d"
    sa-east-1:
      AMI: "ami-6817af04"
    us-west-1:
      AMI: "ami-d5ea86b5"
    us-west-2:
      AMI: "ami-f0091d91"

        # AWS::CloudFormation::Init
        # Use the AWS::CloudFormation::Init type to include metadata on an Amazon EC2 instance for the cfn-init helper script.
        # If your template calls the cfn-init script, the script looks for resource metadata rooted in the AWS::CloudFormation::Init metadata key.
        # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
#AppSecurityGroup	myNginx-AppSecurityGroup-1PUY8JBUKPMI0	AWS::EC2::SecurityGroup	CREATE_FAILED	Invalid id: "myNginx-InstanceSecurityGroup-F1YHB0HJQBF2" (expecting "sg-...")
#InstanceSecurityGroup	myNginx-InstanceSecurityGroup-F1YHB0HJQBF2	AWS::EC2::SecurityGroup	CREATE_COMPLETE	
#WaitCondition	arn:aws:cloudformation:ap-southeast-1:370888776060:stack/myNginx/eb698500-1126-11e7-ae3d-503a138dbaae/WaitHandle	AWS::CloudFormation::WaitCondition	CREATE_FAILED	Resource creation cancelled
#WaitHandle	https://cloudformation-waitcondition-ap-southeast-1.s3-ap-southeast-1.amazonaws.com/arn%3Aaws%3Acloudformation%3Aap-southeast-1%3A370888776060%3Astack/myNginx/eb698500-1126-11e7-ae3d-503a138dbaae/WaitHandle?AWSAccessKeyId=AKIAIZUMWDD466IYK63Q&Expires=1490511097&Signature=k042WylDje4TBuxMjogFlLRq208%3D	AWS::CloudFormation::WaitConditionHandle	CREATE_COMPLETE	


Resources:

  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      VpcId: !Ref "VPCParameter"
      GroupDescription: "Access to the ECS hosts and the tasks/containers that run on them"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: "22"
          IpProtocol: "tcp"
          ToPort: "22"
        - IpProtocol: 'tcp'
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'icmp'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: "Name"
          Value: "InstanceSecurityGroup"

  AppSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security group for RDS DB Instance."
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: "22"
          IpProtocol: "tcp"
          ToPort: "22"
        - CidrIp: "0.0.0.0/0"
          FromPort: "9000"
          IpProtocol: "tcp"
          ToPort: "9000"
#        - FromPort: "9000"
#          IpProtocol: "tcp"
#          SourceSecurityGroupId:
#            Ref: "InstanceSecurityGroup"
#          ToPort: "9000"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      VpcId:
        Ref: "VPCParameter"
      Tags:
        - Key: "Name"
          Value: "AppSecurityGroup"


  MyAppServer:
    Type: "AWS::EC2::Instance"
    Properties:
      KeyName:
        Ref: "KeyName"
      SecurityGroupIds:
      - Ref: "AppSecurityGroup"
      InstanceType:
        Ref: "InstanceType"
      ImageId:
        Fn::FindInMap:
          - "RegionMap"
          - Ref: "AWS::Region"
          - "AMI"
      Monitoring: 'false'
      Tags:
        - Key: "Name"
          Value: "AppServer"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          yum update -y
          yum install htop php-fpm php-gd php-mcrypt php-mysql php-xmlrpc php-cli php-devel telnet nginx -y
          yum remove nginx -y

          mkdir -p /home/www/public_html/test1.timeclone.com
          echo "This is App Server <br> <?php phpinfo(); ?>" > /home/www/public_html/test1.timeclone.com/index.php
          chown -R nginx:nginx /home/www/public_html/test1.timeclone.com
          chmod -R +x /home/www/public_html/test1.timeclone.com

          sed -ie 's/127.0.0.1:9000/9000/g' /etc/php-fpm.d/www.conf
          sed -ie 's/listen.allowed_clients/;listen.allowed_clients/g' /etc/php-fpm.d/www.conf
          sed -ie 's/user = apache/user = nginx/g' /etc/php-fpm.d/www.conf
          sed -ie 's/group = apache/group = nginx/g' /etc/php-fpm.d/www.conf

          chkconfig php-fpm on
          service php-fpm start

          /opt/aws/bin/cfn-signal -e 0 -r 'server setup complete' "${WaitHandleNginx}"  > /tmp/userdata.log

  WaitHandleNginx:
    Type: "AWS::CloudFormation::WaitConditionHandle"

  WaitConditionNginx:
    Type: "AWS::CloudFormation::WaitCondition"
    # DependsOn - not required
    DependsOn: "MyAppServer"
    Properties:
      Handle: !Ref "WaitHandleNginx"
      Timeout: '200'


  MyInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      KeyName:
        Ref: "KeyName"
      SecurityGroupIds:
      - Ref: "InstanceSecurityGroup"
      InstanceType:
         Ref: "InstanceType"
      ImageId:
        Fn::FindInMap:
          - "RegionMap"
          - Ref: "AWS::Region"
          - "AMI"
      Monitoring: 'false'
      Tags:
        - Key: "Name"
          Value: "WebServer"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          yum update -y
          yum install nginx htop telnet -y
          mkdir -p /etc/nginx/sites-enabled
          mkdir -p /etc/nginx/sites-available

          mkdir -p /home/www/public_html/test1.timeclone.com
          echo "<?php phpinfo(); ?>" > /home/www/public_html/test1.timeclone.com/index.php
          chown -R nginx:nginx /home/www/public_html/test1.timeclone.com
          chmod -R +x /home/www/public_html/test1.timeclone.com

          echo "server {
          server_name test1.timeclone.com;
          listen 80;
          
          root /home/www/public_html/test1.timeclone.com/;
          index index.php index.html index.htm;

          location / {
          try_files \$uri \$uri/ /index.php?\$args;
          }

          location ~ \\.php\$ {
          try_files \$uri =404;
          fastcgi_split_path_info ^(.+\.php)(/.+)\$;
          fastcgi_pass php;
          fastcgi_index index.php;
          fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
          include fastcgi_params;
          fastcgi_read_timeout 300;
          }
          }" > /etc/nginx/sites-available/test1.timeclone.com

          ln -sf /etc/nginx/sites-available/test1.timeclone.com /etc/nginx/sites-enabled/
          
          echo "server {
          listen   80 default;
          server_name  _;
          access_log  /var/log/nginx/localhost.access.log;
          location / {
           root  /usr/share/nginx/html;
          index index.html index.htm index.php;
          }
          }" > /etc/nginx/sites-available/default
         
          ln -sf /etc/nginx/sites-available/default /etc/nginx/sites-enabled/
         
          echo "proxy_redirect		off;
          client_body_buffer_size	256K;
          client_max_body_size	12m;
          proxy_connect_timeout	600;
          proxy_send_timeout	600;
          proxy_read_timeout	600;
          proxy_buffer_size	128k;
          proxy_buffers		4 256k;
          proxy_busy_buffers_size	256k;" > /etc/nginx/proxy.conf

          echo "user nginx;
          worker_processes auto;
          pid /var/run/nginx.pid;
       
          events {
          worker_connections 1024;
          multi_accept on;
          use epoll;
          }
       
          worker_rlimit_nofile 100000;

          http {

          ##
          # Basic Settings 
          ##
          sendfile on;
          tcp_nopush on;
          tcp_nodelay on;
          keepalive_timeout 65;
          types_hash_max_size 2048;
          server_tokens off;
         
          include /etc/nginx/mime.types;
          default_type application/octet-stream;
         
          # set client body size to 32M #
          client_max_body_size 32M;

          ##
          # Logging Settings
          ##
          access_log /var/log/nginx/access.log;
          error_log /var/log/nginx/error.log;
         
          ##
          # Gzip Settings
          ##
          gzip on;
          gzip_disable "msie6";
          gzip_static on;
          gzip_vary on;
          gzip_proxied any;
          gzip_comp_level 9;
          gzip_buffers 16 8k;
          gzip_http_version 1.1;
          gzip_types text/plain text/css text/csv application/json application/javascript application/x-javascript image/x-icon text/xml application/xml application/xml+rss text/javascript;
       
          ##
          # open_file_cache optimization
          ##
          open_file_cache max=200000 inactive=50s;
          open_file_cache_valid 60s;
          open_file_cache_min_uses 2;
          open_file_cache_errors on;
       
          ##
          # Upstream Server
          ##
          upstream php {
          server ${MyAppServer.PublicIp}:9000;
          }
       
          ##
          # Virtual Host Configs
          ##
          include /etc/nginx/conf.d/*.conf;
          include /etc/nginx/sites-enabled/*;
          }" > /etc/nginx/nginx.conf

          service nginx start
          chkconfig nginx on
          /opt/aws/bin/cfn-signal -e 0 -r 'server setup complete' "${WaitHandle}"  > /tmp/userdata.log

  WaitHandle:
    Type: "AWS::CloudFormation::WaitConditionHandle"


  WaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    # DependsOn - not required
    DependsOn: "MyInstance"
    Properties:
      Handle: !Ref "WaitHandle"
      Timeout: '200'
      

Outputs:
  WebsiteURL:
    Description: "Our Website URL"
    Value:
      Fn::Join:
        - ""
        -
          - "http://"
          - Fn::GetAtt:
              - "MyInstance"
              - "PublicIp"