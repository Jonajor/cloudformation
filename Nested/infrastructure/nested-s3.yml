# Note, this is a basic use of Cloudformation with disregard for Security Group Access
# You should always update Security Group Access with your own IP Address to ensure your instances security.
#
# How to validate template
# aws cloudformation validate-template --template-body file:////path//cloudformation//Nested//ec2-infra.yml
---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
    This template deploys S3 buckets

Parameters: 

  AccessControl:
    Default: "Private"
    Type: "String"
    Description: "Default permissions for the bucket"
    AllowedValues:
    - "Private"
    - "PublicRead"
    - "PublicReadWrite"
    - "AuthenticatedRead"
    - "LogDeliveryWrite"
    - "BucketOwnerRead"
    - "BucketOwnerFullControl"

  RegionAStorage:
    Description: "A reference to the Region Archive Storage"
    Type: "String"

  # Existing Domain Name: Timeclone.com
  # Assuming you have already upload to AWS Certificate Manager
  Domain1CertARN:
    Description: "ARN for my domain name"
    Type: "String"


Resources:
  # Source for All data backups
  S3Backup:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: !Ref "AccessControl"
      VersioningConfiguration:
        Status: "Enabled"
      LifecycleConfiguration:
        Rules:
        - Id: "MyBackupArchive"
          Status: "Enabled"
          ExpirationInDays: '365' # Complete Disposal/Deletion of Data after 1 year
          Transition:
            TransitionInDays: '30' # Move Data from S3 bucket to Infrequent Archive after 30 days.
            StorageClass: !Ref "RegionAStorage"
    DeletionPolicy: "Retain"

  S3BackupPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref "S3Backup"
      PolicyDocument:
        Statement:
        - Sid: "DenyUnEncryptedObjectUploads"
          Effect: "Deny"
          Principal:
            AWS: "*"
          Action: "s3:PutObject"
          Resource: !Join ["", ["arn:aws:s3:::", !Ref "S3Backup", "/*"]]
          Condition:
            StringNotEquals:
              s3:x-amz-server-side-encryption: "AES256"

  # https://forums.aws.amazon.com/thread.jspa?threadID=221113
  # Note : at this time ELB logging does not support server side encryption
  S3Logging:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: !Ref "AccessControl"
      VersioningConfiguration:
        Status: "Enabled"
      LifecycleConfiguration:
        Rules:
        - Id: "MyLoggingArchive"
          Status: "Enabled"
          ExpirationInDays: '365' # Complete Disposal/Deletion of Data after 1 year
          Transition:
            TransitionInDays: '30' # Move Data from S3 bucket to Infrequent Archive after 30 days.
            StorageClass: !Ref "RegionAStorage"
    DeletionPolicy: "Retain"

  S3LoggingPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref "S3Logging"
      PolicyDocument:
        Statement:
          -
            Action:
              - "s3:PutObject"
            Effect: 'Allow'
            Resource: !Join ["", ["arn:aws:s3:::", !Ref "S3Logging", "/*"]]
            Principal:
              AWS:
                - "*"


  # S3 Bucket with Cloudfront Setup
  # Serving Static content, no need for Lifecycle policy the data taken from repositories. (content can be rebuilt)
  S3CloudFront:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: "PublicRead"
      WebsiteConfiguration:
        IndexDocument: "index.html"
        ErrorDocument: "error.html"
    DeletionPolicy: "Retain"

  S3CloudFrontPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref "S3CloudFront"
      PolicyDocument:
        Statement:
          -
            Action:
              - "s3:GetObject"
            Effect: 'Allow'
            Resource: !Join ["", ["arn:aws:s3:::", !Ref "S3CloudFront", "/*"]]
            Principal:
              AWS:
                - "*"

  MyCDN:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
        - Id: "MyOrigin"
          DomainName:
            Fn::GetAtt:
            - "S3CloudFront"
            - "DomainName"
          S3OriginConfig: {}
        #Value of property OriginSSLProtocols must be of type List of String
        Enabled: 'true'
        Aliases:
        - "cdn.timeclone.com"
        DefaultCacheBehavior:
          TargetOriginId: "MyOrigin"
          ForwardedValues:
            QueryString: 'false'
          ViewerProtocolPolicy: "allow-all"
        ViewerCertificate:
          # Default Cloudfront AWS certs
          #CloudFrontDefaultCertificate: 'true'
          #
          # Own Certs
          # https://cloudonaut.io/pitfall-acm-certificate-cloudfront-cloudformation/
          # Error : The specified SSL certificate doesn't exist, isn't valid, or doesn't include a valid certificate chain.
          # But the ACM certificate needs to be created in us-east-1 when used together with CloudFront. 
          # So one possible solution was to create the CloudFormation stack in us-east-1. Lesson learned! :)
          AcmCertificateArn: !Ref "Domain1CertARN"
          SslSupportMethod: "sni-only"
        PriceClass: "PriceClass_All"


Outputs:
  S3Backup:
    Description: "S3 Backup Bucket Name"
    Value: !Ref "S3Backup"

  S3Logging:
    Description: "S3 Logging Bucket Name"
    Value: !Ref "S3Logging"

  S3CloudFront:
    Description: "S3 Bucket to Cloudfront CDN"
    Value: !Ref "S3CloudFront"


