# Note, this is a basic use of Cloudformation with disregard for Security Group Access
# You should always update Security Group Access with your own IP Address to ensure your instances security.
#
# How to validate template
# aws cloudformation validate-template --template-body file:////path//cloudformation//Nested//security-group.yml
---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
    This template contains the security groups required by our entire stack.
    We create them in a seperate nested template, so they can be referenced
    by all of the other nested templates.

Parameters:

  VPCParameter:
    Description: "VPC to launch instances into"
    Type: "AWS::EC2::VPC::Id"

  NACLParameter:
    Description: "Network ACL Id"
    Type: "String"

  PublicSubnet1Parameter:
    Description: "Subnets to launch instances into"
    Type: "String"

  PublicSubnet2Parameter:
    Description: "Subnets to launch instances into"
    Type: "String"

  EnvironmentName:
    Default: "dev"
    Description: "An environment name that will be prefixed to resource names"
    Type: "String"


Resources:
  # This security group defines who/where is allowed to access the ECS hosts directly.
  # By default we're just allowing access from the load balancer.  If you want to SSH 
  # into the hosts, or expose non-load balanced services you can open their ports here.
  ECSHostSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      VpcId: !Ref "VPCParameter"
      GroupDescription: "Web Server Security Group"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: "22"
          IpProtocol: "tcp"
          ToPort: "22"
        - IpProtocol: 'tcp'
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'
        - FromPort: "80"
          IpProtocol: "tcp"
          SourceSecurityGroupId:
            Ref: "ELBSecurityGroup"
          ToPort: "80"
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: "Name"
          Value: !Sub "${EnvironmentName}-ECS-Hosts"

  # WebServer Elastic Load Balancer
  ELBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "ELB-SG"
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
      - IpProtocol: 'icmp'
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: '0.0.0.0/0'
      - CidrIp: "0.0.0.0/0"
        FromPort: "80"
        IpProtocol: "tcp"
        ToPort: "80"
      VpcId:
        Ref: "VPCParameter"
      Tags:
        - Key: "Name"
          Value: !Sub "${EnvironmentName}-ELBSecurityGroup"

  # AppServer Security Group
  APPSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      VpcId: !Ref "VPCParameter"
      GroupDescription: "Application Server Security Group"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: "22"
          IpProtocol: "tcp"
          ToPort: "22"
        - FromPort: "9000"
          IpProtocol: "tcp"
          SourceSecurityGroupId:
            Ref: "APPELBSecurityGroup"
          ToPort: "9000"
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: "Name"
          Value: !Sub "${EnvironmentName}-ECS-Hosts"

  # AppServer Elastic Load Balancer
  APPELBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "ELB-APP"
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
        - FromPort: "9000"
          IpProtocol: "tcp"
          SourceSecurityGroupId:
            Ref: "ECSHostSecurityGroup"
          ToPort: "9000"
#      - CidrIp: "0.0.0.0/0"
#        FromPort: "9000"
#        IpProtocol: "tcp"
#        ToPort: "9000"
      VpcId:
        Ref: "VPCParameter"
      Tags:
        - Key: "Name"
          Value: !Sub "${EnvironmentName}-ELBSecurityGroup"

  # Allow RDS connection from ECSHostSecurityGroup only.
  RDSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security group for RDS DB Instance."
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
      - FromPort: "3306"
        IpProtocol: "tcp"
        SourceSecurityGroupId:
          Ref: "ECSHostSecurityGroup"
        ToPort: "3306"
      VpcId:
        Ref: "VPCParameter"
      Tags:
        - Key: "Name"
          Value: !Sub "${EnvironmentName}-RDSSecurityGroup"


####### INBOUND HTTP Network ACL RULES #######
  InboundHTTPNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "NACLParameter"
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '80'
        To: '80'

####### INBOUND HTTPS Network ACL RULES #######
  InboundHTTPSNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "NACLParameter"
      RuleNumber: '200'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '443'
        To: '443'

####### INBOUND SSH Network ACL RULES #######
  InboundSSHNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "NACLParameter"
      RuleNumber: '300'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '22'
        To: '22'

####### INBOUND Ephemeral Ports Network ACL RULES #######
  InboundEPHNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "NACLParameter"
      RuleNumber: '400'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '1024'
        To: '65535'

####### INBOUND ICMP Network ACL RULES #######
  InboundICMPNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "NACLParameter"
      RuleNumber: '500'
      Protocol: "1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      Icmp:
        Code: "-1"
        Type: "-1"

####### OUTBOUND HTTP Network ACL RULES #######
  OutboundHTTPNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "NACLParameter"
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '80'
        To: '80'

####### OUTBOUND HTTPS Network ACL RULES #######
  OutboundHTTPSNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "NACLParameter"
      RuleNumber: '200'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '443'
        To: '443'

####### OUTBOUND SSH Network ACL RULES #######
  OutboundSSHNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "NACLParameter"
      RuleNumber: '300'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '22'
        To: '22'

####### OUTBOUND Ephemeral Ports Network ACL RULES #######
  OutboundEPHNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "NACLParameter"
      RuleNumber: '400'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '1024'
        To: '65535'

####### OUTBOUND ICMP Network ACL RULES #######
  OutboundICMPNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "NACLParameter"
      RuleNumber: '500'
      Protocol: "1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      Icmp:
        Code: "-1"
        Type: "-1"

Outputs:

  ECSHostSecurityGroup: 
    Description: "A reference to the security group for ECS hosts"
    Value: !Ref "ECSHostSecurityGroup"

  ELBSecurityGroup:
    Description: "A reference to the security group for ELB"
    Value: !Ref "ELBSecurityGroup"

  APPSecurityGroup: 
    Description: "A reference to the security group for ECS hosts"
    Value: !Ref "APPSecurityGroup"

  APPELBSecurityGroup:
    Description: "A reference to the security group for ELB"
    Value: !Ref "APPELBSecurityGroup"

  RDSSecurityGroup: 
    Description: "A reference to the security group for RDS"
    Value: !Ref "RDSSecurityGroup"

  EnvironmentName:
    Description: "A reference to Environment Name"
    Value: !Ref "EnvironmentName"



