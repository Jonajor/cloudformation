# Note, this is a basic use of Cloudformation with disregard for Security Group Access
# You should always update Security Group Access with your own IP Address to ensure your instances security.
#
# How to validate template
# aws cloudformation validate-template --template-body file:////path//cloudformation//Nested//ec2-infra.yml
---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
    Database stack creation prerequisite:  first create a VPC stack.

Parameters:

  VPCParameter:
    Description: "VPC to launch instances into"
    Type: "AWS::EC2::VPC::Id"

  PrivateSubnetsParameter:
    Description: "Subnets to launch instances into"
    Type: "List<AWS::EC2::Subnet::Id>"

  RDSSecurityGroup:
    Description: "Select the Security Group to use for the ELB"
    Type: "AWS::EC2::SecurityGroup::Id"

  DatabaseUser:
    Default: "startupadmin"
    NoEcho: 'true'
    Type: "String"
    Description: "Database admin account name"
    MinLength: '5'
    MaxLength: '16'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: "Name must begin with a letter and contain only alphanumeric characters."

  DatabasePassword:
    Default: "0bee082a464"
    NoEcho: 'true'
    Type: "String"
    Description: "Database admin account password"
    MinLength: '6'
    MaxLength: '41'
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: "Password must contain only alphanumeric characters."

  DatabaseName:
    Default: "StartupDB"
    Type: "String"
    Description: "Database name"
    MinLength: '1'
    MaxLength: '30'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: "Name must begin with a letter and contain only alphanumeric characters."
    
  DatabaseSize:
    Default: '5'
    Type: "String"
    Description: "Database storage size in gigabytes (GB)"
    MinLength: '1'
    AllowedPattern: "[5-9][0-9]*"
    ConstraintDescription: "Enter a size of at least 5 GB"
    
  DatabaseEngine:
    Default: "mysql"
    Type: "String"
    Description: "Database engine, MySQL or PostgreSQL"
    ConstraintDescription: "Choose an engine from the drop down"
    AllowedValues: 
      - "mysql"
      - "postgres"

  DatabaseInstanceClass:
    Default: "db.t2.micro"
    Type: "String"
    Description: "Database instance class, e.g. db.t2.micro (free tier)"
    ConstraintDescription: "Choose an instance class from the drop down"
    AllowedValues: 
      - "db.t2.micro"
      - "db.t2.small"
      - "db.t2.medium"
      - "db.t2.large"
      - "db.m4.large"
      - "db.m4.xlarge"
      - "db.m4.2xlarge"
      - "db.m4.4xlarge"
      - "db.m4.10xlarge"
      - "db.r3.large"
      - "db.r3.xlarge"
      - "db.r3.2xlarge"
      - "db.r3.4xlarge"
      - "db.r3.8xlarge"
      
  EnvironmentName:
    Default: "dev"
    Description: "Environment name, either dev or prod."
    Type: "String"
    MinLength: '1'
    MaxLength: '255'
    AllowedValues: 
      - "dev"
      - "prod"
    ConstraintDescription: "Specify either dev or prod."
    

Conditions: 

  CreateProdEnv: !Equals [ !Ref "EnvironmentName", "prod" ]


Resources:

  Database:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBSubnetGroupName: !Ref "DbSubnetGroup"
      VPCSecurityGroups:
      - Ref: "RDSSecurityGroup"
      Engine: !Ref "DatabaseEngine"
      DBName: !Ref "DatabaseName"
      MasterUsername: !Ref "DatabaseUser"
      MasterUserPassword: !Ref "DatabasePassword"
      DBInstanceClass: !Ref "DatabaseInstanceClass"
      AllocatedStorage: !Ref "DatabaseSize"
      StorageType: "gp2"
      MultiAZ: !If [ "CreateProdEnv", 'true', 'false' ]

  DbSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "RDS DB subnet group"
      SubnetIds:
        Ref: "PrivateSubnetsParameter"

Outputs:

  RdsDbId:
    Description: "RDS Database ID"
    Value: !Ref "Database"
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseID"

  RdsDbURL:
    Description: "RDS Database URL"
    Value: !GetAtt "Database.Endpoint.Address"
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseURL"

  DbUser:
    Description: "RDS Database admin account user"
    Value: !Ref "DatabaseUser"
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseUser"

  DbPassword:
    Description: "RDS Database admin account password"
    Value: !Ref "DatabasePassword"
    Export:
      Name: !Sub "${AWS::StackName}-DatabasePassword"





