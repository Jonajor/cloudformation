# Note, this is a basic use of Cloudformation with disregard for Security Group Access
# You should always update Security Group Access with your own IP Address to ensure your instances security.
#
# Requirement :
# Create a 2 dev server
# - Autoscaling ( min-2, desired-2, max-3)
# - AutoHealing (Web Server)
# - Elastic Load Balancer
# - Has Full Access to S3 and CloudWatch (logging)
# - Build Service with wait handle (cfg-signal)
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
    This template is a master to perform the nessesary task to
    perform the following :
    - Create a 2 dev server
    - Autoscaling ( min-2, desired-2, max-3)
    - AutoHealing (Web Server)
    - Elastic Load Balancer
    - Has Full Access to S3 and CloudWatch
    - CloudWatch AutoScaling Alarm and /var/log logging
    - Build Service with wait handle (cfg-signal)

Parameters: 

  ServerEnvironment:
    Default: "dev"
    Description: "Environment name, either dev or prod."
    Type: "String"
    MinLength: '1'
    MaxLength: '255'
    AllowedValues: 
      - "dev"
      - "prod"
    ConstraintDescription: "Specify either 'dev' or 'prod'."

# Mapping Supports for the following Environment
Mappings:
  EnvMap:
    dev:
      # Auto-Scaling Setting
      AS-MIN: '1'
      AS-MAX: '1'
      AS-DES: '1'
    prod:
      # Auto-Scaling Setting
      AS-MIN: '2'
      AS-MAX: '4'
      AS-DES: '2'

# Mapping Supports for the following Regions
#
# US East (N. Virginia)     = us-east-1
# US East (Ohio)            = us-east-2
# US West (N. California)   = us-west-1
# US West (Oregon)          = us-west-2
# Asia Pacific (Tokyo)      = ap-northeast-1
# Asia Pacific (Singapore)  = ap-southeast-1
# Asia Pacific (Sydney)     = ap-southeast-2
# EU (Frankfurt)            = eu-central-1
# EU (Ireland)              = eu-west-1
# EU (London)               = eu-west-2
#
# AMI Instance - Amazon Linux AMI 2016.09.1 (HVM), SSD Volume Type - ami-dc9339bf (Free tier eligible)
#
# AStorage - The storage class to which you want the object to transition.
#
# For any additional region, you can add by yourself below.

Mappings:
  RegionMap:
    us-east-1:
      AMI: "ami-0b33d91d"
      AStorage: "GLACIER"
      CertARN: "arn:aws:acm:us-east-1:370888776060:certificate/4696461e-df6b-4000-963b-68c1628f0bac"
    us-east-2:
      AMI: "ami-c55673a0"
      AStorage: "GLACIER"
      CertARN: "arn:aws:acm:us-east-1:370888776060:certificate/4696461e-df6b-4000-963b-68c1628f0bac"
    us-west-1:
      AMI: "ami-165a0876"
      AStorage: "GLACIER"
      CertARN: "arn:aws:acm:us-east-1:370888776060:certificate/4696461e-df6b-4000-963b-68c1628f0bac"
    us-west-2:
      AMI: "ami-f173cc91"
      AStorage: "GLACIER"
      CertARN: "arn:aws:acm:us-east-1:370888776060:certificate/4696461e-df6b-4000-963b-68c1628f0bac"
    ap-northeast-1:
      AMI: "ami-56d4ad31"
      AStorage: "GLACIER"
      CertARN: "arn:aws:acm:us-east-1:370888776060:certificate/4696461e-df6b-4000-963b-68c1628f0bac"
    ap-southeast-1:
      AMI: "ami-dc9339bf"
      AStorage: "STANDARD_IA"
      CertARN: "arn:aws:acm:ap-southeast-1:370888776060:certificate/29a917de-3402-46fb-8e0b-c164a26277d4"
    ap-southeast-2:
      AMI: "ami-1c47407f"
      AStorage: "GLACIER"
      CertARN: "arn:aws:acm:us-east-1:370888776060:certificate/4696461e-df6b-4000-963b-68c1628f0bac"
    eu-central-1:
      AMI: "ami-af0fc0c0"
      AStorage: "GLACIER"
      CertARN: "arn:aws:acm:us-east-1:370888776060:certificate/4696461e-df6b-4000-963b-68c1628f0bac"
    eu-west-1:
      AMI: "ami-70edb016"
      AStorage: "GLACIER"
      CertARN: "arn:aws:acm:us-east-1:370888776060:certificate/4696461e-df6b-4000-963b-68c1628f0bac"
    eu-west-2:
      AMI: "ami-f1949e95"
      AStorage: "GLACIER"
      CertARN: "arn:aws:acm:us-east-1:370888776060:certificate/4696461e-df6b-4000-963b-68c1628f0bac"

Conditions: 
  UseProdEnv: !Equals [ !Ref "ServerEnvironment", "prod" ]

Resources:

  MyRoleAccess:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "https://s3-ap-southeast-1.amazonaws.com/cf-templates-19sg5y0d6d084-ap-southeast-1/nested-s3sw-role.yml"
      TimeoutInMinutes: '5'

  MyS3Bucket:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "https://s3-ap-southeast-1.amazonaws.com/cf-templates-19sg5y0d6d084-ap-southeast-1/nested-s3.yml"
      TimeoutInMinutes: '5'
      Parameters:
        # https://cloudonaut.io/pitfall-acm-certificate-cloudfront-cloudformation/
        # ACM certificate needs to be created in us-east-1 when used together with CloudFront. 
        Domain1CertARN: !FindInMap ["RegionMap", "us-east-1", "CertARN"]
        RegionAStorage: !FindInMap ["RegionMap", !Ref "AWS::Region", "AStorage"]

  MyVPC:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "https://s3-ap-southeast-1.amazonaws.com/cf-templates-19sg5y0d6d084-ap-southeast-1/nested-vpc.yml"
      TimeoutInMinutes: '5'
      Parameters:
        ServerEnvParameter: !Ref "ServerEnvironment"
        VpcCIDR: "10.0.0.0/16"
        PublicSubnet1CIDR: "10.0.1.0/24"
        PublicSubnet2CIDR: "10.0.2.0/24"
        PrivateSubnet1CIDR: "10.0.3.0/24"
        PrivateSubnet2CIDR: "10.0.4.0/24"
        FlowLogRole: !GetAtt "MyRoleAccess.Outputs.VPCFlowLogRoleArn"

  SecurityGroup:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "https://s3-ap-southeast-1.amazonaws.com/cf-templates-19sg5y0d6d084-ap-southeast-1/nested-sg.yml"
      TimeoutInMinutes: '5'
      Parameters:
        ServerEnvParameter: !Ref "ServerEnvironment"
        VPCParameter: !GetAtt "MyVPC.Outputs.VPC"
        NACLParameter: !GetAtt "MyVPC.Outputs.MyNetworkACL"

  MyAPPELB:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "https://s3-ap-southeast-1.amazonaws.com/cf-templates-19sg5y0d6d084-ap-southeast-1/nested-elb-appserver.yml"
      TimeoutInMinutes: '5'
      Parameters:
        ServerEnvParameter: !Ref "ServerEnvironment"
        AppLoadbalancerSGId: !GetAtt "SecurityGroup.Outputs.APPELBSecurityGroup"
        S3BackupBucket: !GetAtt "MyS3Bucket.Outputs.S3Backup"
        S3LoggingBucket: !GetAtt "MyS3Bucket.Outputs.S3Logging"
        PublicSubnetsParameter: !GetAtt "MyVPC.Outputs.PublicSubnets"
        PrivateSubnetsParameter: !GetAtt "MyVPC.Outputs.PrivateSubnets"

  MyAPPAutoScaling:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "https://s3-ap-southeast-1.amazonaws.com/cf-templates-19sg5y0d6d084-ap-southeast-1/nested-autoscaling-appserver.yml"
      TimeoutInMinutes: '5'
      Parameters:
        ServerEnvParameter: !Ref "ServerEnvironment"
        RegionAMI: !FindInMap ["RegionMap", !Ref "AWS::Region", "AMI"]
        AppServerSGId : !GetAtt "SecurityGroup.Outputs.APPSecurityGroup"
        APPELBName: !GetAtt "MyAPPELB.Outputs.APPLoadBalancer"
        IamInstanceProfile: !GetAtt "MyRoleAccess.Outputs.S3CWAccessInstanceProfile"
        PublicSubnetsParameter: !GetAtt "MyVPC.Outputs.PublicSubnets"
        PrivateSubnetsParameter: !GetAtt "MyVPC.Outputs.PrivateSubnets"
        MinParameter: !FindInMap ["EnvMap", !Ref "ServerEnvironment", "AS-MIN"]
        MaxParameter: !FindInMap ["EnvMap", !Ref "ServerEnvironment", "AS-MAX"]
        DesParameter: !FindInMap ["EnvMap", !Ref "ServerEnvironment", "AS-DES"]
 
  MyELB:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "https://s3-ap-southeast-1.amazonaws.com/cf-templates-19sg5y0d6d084-ap-southeast-1/nested-elb.yml"
      TimeoutInMinutes: '5'
      Parameters:
        Domain1CertARN: !FindInMap ["RegionMap", !Ref "AWS::Region", "CertARN"]
        ELBSecurityGroup: !GetAtt "SecurityGroup.Outputs.ELBSecurityGroup"
        PublicSubnetsParameter: !GetAtt "MyVPC.Outputs.PublicSubnets"
        S3BackupBucket: !GetAtt "MyS3Bucket.Outputs.S3Backup"
        S3LoggingBucket: !GetAtt "MyS3Bucket.Outputs.S3Logging"

  MyRDS:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "https://s3-ap-southeast-1.amazonaws.com/cf-templates-19sg5y0d6d084-ap-southeast-1/nested-rds.yml"
      TimeoutInMinutes: '5'
      Parameters:
        ServerEnvParameter: !Ref "ServerEnvironment"
        VPCParameter: !GetAtt "MyVPC.Outputs.VPC"
        RDSSecurityGroup: !GetAtt "SecurityGroup.Outputs.RDSSecurityGroup"
        PrivateSubnetsParameter: !GetAtt "MyVPC.Outputs.PrivateSubnets"

  MyAutoScaling:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "https://s3-ap-southeast-1.amazonaws.com/cf-templates-19sg5y0d6d084-ap-southeast-1/nested-autoscaling.yml"
      TimeoutInMinutes: '5'
      Parameters:
        RegionAMI: !FindInMap ["RegionMap", !Ref "AWS::Region", "AMI"]
        ECSHostSecurityGroup: !GetAtt "SecurityGroup.Outputs.ECSHostSecurityGroup"
        LoadBalancer: !GetAtt "MyELB.Outputs.LoadBalancer"
        IamInstanceProfile: !GetAtt "MyRoleAccess.Outputs.S3CWAccessInstanceProfile"
        PublicSubnetsParameter: !GetAtt "MyVPC.Outputs.PublicSubnets"
        APPELBUrl: !GetAtt "MyAPPELB.Outputs.APPLoadBalancerUrl"
        RegionAMI: !FindInMap ["EnvMap", !Ref "ServerEnvironment", "AS-MIN"]
        RegionAMI: !FindInMap ["EnvMap", !Ref "ServerEnvironment", "AS-MAX"]
        RegionAMI: !FindInMap ["EnvMap", !Ref "ServerEnvironment", "AS-DES"]

  MyCloudWatch:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "https://s3-ap-southeast-1.amazonaws.com/cf-templates-19sg5y0d6d084-ap-southeast-1/nested-cloudwatch.yml"
      TimeoutInMinutes: '5'
      Parameters:
        AutoScalingGroup: !GetAtt "MyAutoScaling.Outputs.AutoScalingGroupID"
        WebServerScaleUpPolicy: !GetAtt "MyAutoScaling.Outputs.AutoScalingUpPolicy"
        WebServerScaleDownPolicy: !GetAtt "MyAutoScaling.Outputs.AutoScalingDownPolicy"
        AppServerSG: !GetAtt "MyAPPAutoScaling.Outputs.AppScalingGroup"
        AppServerUpPolicy: !GetAtt "MyAPPAutoScaling.Outputs.APPServerScaleUpPolicy"
        AppServerDownPolicy: !GetAtt "MyAPPAutoScaling.Outputs.APPServerScaleDownPolicy"


Outputs:
  Webserver:
    Description: "Public IP address of the new EC2 instance"
    Value:
      Fn::Join:
        - ''
        - - "http://"
          - !GetAtt "MyELB.Outputs.LoadBalancerUrl"
          - "/"

