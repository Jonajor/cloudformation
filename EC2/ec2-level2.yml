# Setup EC2 level2 instance 
# - Multi Instances
# - Device/Volume type & size
# - Additional mount
#
# Note, this is a basic use of Cloudformation with disregard for Security Group Access
# You should always update Security Group Access with your own IP Address to ensure your instances security.
#
# How to validate template
# aws cloudformation validate-template --template-body file:////path//cloudformation//EC2//ec2-level2.yml
#
# How to Create/Update stack 
# aws cloudformation create-stack --stack-name myec2level2 --template-body file:////path//cloudformation//EC2//ec2-level2.yml
# aws cloudformation update-stack --stack-name myec2level2 --template-body file:////path//cloudformation//EC2//ec2-level2.yml
#
# How to Delete stack
# aws cloudformation delete-stack --stack-name myec2level2
#
# Example with parameter
# aws cloudformation create-stack  --stack-name startmyinstance  
#    --template-body file://home/ec2-user/templates/startmyinstance.json 
#    --parameters  ParameterKey=KeyPairName,ParameterValue=MyKey ParameterKey=InstanceType,ParameterValue=t1.micro
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Example EC2 Set-up Level2"
# Paramaters are referenced using the Ref property
# e.g. Ref: "KeyName"
#
# Parameters can be assigned a default value, but if not then the value
# needs to be provided when uploading the CloudFormation.
# If uploading via CLI then you'll provide a --parameters flag
# If uploading via the AWS console, a GUI will be provided
Parameters: 
  InstanceType: 
    Description: "Enter t2.micro or m1.small. Default is t2.micro."
    Type: "String"
    Default: "t2.micro"
    AllowedValues: 
      - "t2.micro"
      - "m1.small"
  KeyName:
    Description: "Enter an existing EC2 KeyPair. Default is MyEC2Key"
    Type: "String"
    Default: "MyEC2Key"


# Mappings allow us to map a key to a corresponding set of named values
# So if our instance is brought up in the eu-west-1 region we can use
# AWS::Region to tell us the current zone and then use the intrinsic function
# Fn::FindInMap to return the relevant matched value
Mappings:
  RegionMap:
    eu-west-1:
      AMI: "ami-bff32ccc"
    ap-southeast-1:
      AMI: "ami-dc9339bf" # My-Default-AMI
    ap-southeast-2:
      AMI: "ami-48d38c2b"
    eu-central-1:
      AMI: "ami-bc5b48d0"
    ap-northeast-2:
      AMI: "ami-249b554a"
    ap-northeast-1:
      AMI: "ami-383c1956"
    us-east-1:
      AMI: "ami-0b33d91d"
    sa-east-1:
      AMI: "ami-6817af04"
    us-west-1:
      AMI: "ami-d5ea86b5"
    us-west-2:
      AMI: "ami-f0091d91"

Resources:
  MyWebServer:
    Type: "AWS::EC2::Instance"
    Properties:
      KeyName:
        Ref: "KeyName"
      SecurityGroups:
        - Ref: "webdmz"
      InstanceType:
        Ref: "InstanceType"
      BlockDeviceMappings:
        # Root Mount Device
        - DeviceName: "/dev/xvda"
          Ebs:
            # Increasing the volume size will actually cause to spin another
            # ec2 instance and shut down the existing old volume
            VolumeSize: "10" # Default: 8GB
            VolumeType: "gp2"
        # Additional Mount Device
        - DeviceName: "/dev/xvdb"
          Ebs:
            VolumeSize: "10"
            VolumeType: "gp2"
      ImageId:
        Fn::FindInMap:
          - "RegionMap"
          - Ref: "AWS::Region"
          - "AMI"
      Tags:
        - Key: "Name"
          Value: "MyWebServer"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install httpd -y
          yum update -y
          service httpd start
          chkconfig httpd on
          echo "<html><h1>Hello Cloud Gurus!</h1></html>" > /var/www/html/index.html

# Second EC2 instance, more customization
  MyBastionServer:
    Type: "AWS::EC2::Instance"
    Properties:
      KeyName:
        Ref: "KeyName"
      SecurityGroups:
        - Ref: "webdmz"
      InstanceType:
        Ref: "InstanceType"
      BlockDeviceMappings:
        # Root Mount Device
        - DeviceName: "/dev/xvda"
          Ebs:
            # Increasing the volume size will actually cause to spin another
            # ec2 instance and shut down the existing old volume
            VolumeSize: "10"
            VolumeType: "gp2"
      ImageId:
        Fn::FindInMap:
          - "RegionMap"
          - Ref: "AWS::Region"
          - "AMI"
      Tags:
        - Key: "Name"
          Value: "MyBastionServer"

# Building Security Group - WebDMZ
# Note: SecurityGroupEgress cannot be specified without VpcId
  webdmz:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow http/https/ssh to client host"
# Ignore VPCid on testing platform
# SecurityGroupEgress cannot be specified without VpcId
#      VpcId:
#        Ref: "VPC"
      SecurityGroupIngress:
          # Allow SSH Request
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
          # Allow HTTP Request
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
          # Allow HTTPS Request
        - IpProtocol: 'tcp'
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'
          # Allow Ping Request
        - IpProtocol: 'icmp'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
# SecurityGroupEgress cannot be specified without VpcId
#      SecurityGroupEgress:
#        - IpProtocol: '-1'
#          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: "Name"
          Value: "webdmz"

# Output Server dns name and publicIP
Outputs:
  MyWebServerDNSName:
    Description: "Public DNS name of the new EC2 instance"
    Value:
      Fn::GetAtt:
      - "MyWebServer"
      - "PublicDnsName"
  MyWebServerIPAddress:
    Description: "Public IP address of the new EC2 instance"
    Value:
      Fn::GetAtt:
      - "MyWebServer"
      - "PublicIp"
  MyBastionServerDNSName:
    Description: "Public DNS name of the new EC2 instance"
    Value:
      Fn::GetAtt:
      - "MyBastionServer"
      - "PublicDnsName"
  MyBastionServerIPAddress:
    Description: "Public IP address of the new EC2 instance"
    Value:
      Fn::GetAtt:
      - "MyBastionServer"
      - "PublicIp"
