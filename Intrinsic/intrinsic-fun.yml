# Tutorial Intrinsic Function
# - Pseudo Parameters Reference
# - Fn::GetAtt
#
# Note, this is a basic use of Cloudformation with disregard for Security Group Access
# You should always update Security Group Access with your own IP Address to ensure your instances security.
#
# How to validate template
# aws cloudformation validate-template --template-body file:////path//cloudformation//Intrinsic//intrinsic-fun.yml
#
# How to Create/Update stack 
# aws cloudformation create-stack --stack-name myIntrinsic --template-body file:////path//cloudformation//Intrinsic//intrinsic-fun.yml
# aws cloudformation update-stack --stack-name myIntrinsic --template-body file:////path//cloudformation//Intrinsic//intrinsic-fun.yml
#
# How to Delete stack
# aws cloudformation delete-stack --stack-name myIntrinsic
#
# Example with parameter
# aws cloudformation create-stack  --stack-name startmyinstance  
#    --template-body file://home/ec2-user/templates/startmyinstance.json 
#    --parameters  ParameterKey=KeyPairName,ParameterValue=MyKey ParameterKey=InstanceType,ParameterValue=t1.micro   
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Intrinsic Function Test"

# Paramaters are referenced using the Ref property
# e.g. Ref: "KeyName"
#
# Parameters can be assigned a default value, but if not then the value
# needs to be provided when uploading the CloudFormation.
# If uploading via CLI then you'll provide a --parameters flag
# If uploading via the AWS console, a GUI will be provided
Parameters: 

  InstanceType: 
    Default: "t2.micro"
    Description: "Enter t2.micro or m1.small. Default is t2.micro."
    Type: "String"
    AllowedValues: 
      - "t2.micro"
      - "m1.small"

  KeyName:
    Default: "MyEC2Key"
    Description: "Enter an existing EC2 KeyPair. Default is MyEC2Key"
    Type: "String"

  VPCParameter:
    Default: 'vpc-4c3fc128'
    Description: "VPC to launch instances into"
    Type: "AWS::EC2::VPC::Id"

  ENVParameter:
    Default: "dev"
    Description: "Environment name, either dev or prod."
    Type: "String"
    MinLength: '1'
    MaxLength: '255'
    AllowedValues: 
      - "dev"
      - "prod"
    ConstraintDescription: "Specify either 'dev' or 'prod'."


# Fn::FindInMap
# The intrinsic function Fn::FindInMap returns the value corresponding to keys in a two-level map that is declared in the Mappings section.
# Syntax for the full function name:
# "Fn::FindInMap": [ MapName, TopLevelKey, SecondLevelKey ]
# Syntax for the short form:
# !FindInMap [ MapName, TopLevelKey, SecondLevelKey ]
# Eg. ImageId: !FindInMap [ "RegionMap", !Ref "AWS::Region", "AMI" ]
Mappings:
  RegionMap:
    eu-west-1:
      AMI: "ami-bff32ccc"
    ap-southeast-1:
      AMI: "ami-dc9339bf" # My-Default-AMI
    ap-southeast-2:
      AMI: "ami-48d38c2b"
    eu-central-1:
      AMI: "ami-bc5b48d0"
    ap-northeast-2:
      AMI: "ami-249b554a"
    ap-northeast-1:
      AMI: "ami-383c1956"
    us-east-1:
      AMI: "ami-0b33d91d"
    sa-east-1:
      AMI: "ami-6817af04"
    us-west-1:
      AMI: "ami-d5ea86b5"
    us-west-2:
      AMI: "ami-f0091d91"

# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-conditions.html
# Fn::Equals Compares if two values are equal. Returns true if the two values are equal or false if they aren't.
# Syntax for the full function name:
# "Fn::Equals": [value_1, value_2]
# Syntax for the short form:
# !Equals [value_1, value_2]
Conditions: 
  UseProdEnv: !Equals [ !Ref "ENVParameter", "prod" ]


Resources:
  Ec2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      KeyName:
        Ref: "KeyName"
      SecurityGroupIds:
      - Ref: "InstanceSecurityGroup"
      InstanceType:
        Ref: "InstanceType"
      ImageId:
        Fn::FindInMap:
          - "RegionMap"
          - Ref: "AWS::Region"
          - "AMI"
      Tags:
        - Key: "Name"
          # "Fn::If": [condition_name, value_if_true, value_if_false]
          # !If [condition_name, value_if_true, value_if_false]
          Value: !If [ "UseProdEnv", 'ProdServer', 'DevServer' ]

      # Fn::Base64
      # The intrinsic function Fn::Base64 returns the Base64 representation of the input string. This function is typically used to 
      # pass encoded data to Amazon EC2 instances by way of the UserData property.
      # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-base64.html
      # Syntax for the full function name:
      # "Fn::Base64": valueToEncode
      # Syntax for the short form:
      # !Base64 valueToEncode      
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install httpd -y
          yum update -y
          service httpd start
          chkconfig httpd on
          echo "<html><h1>Hello Cloud Gurus!</h1></html>" > /var/www/html/index.html


  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Enable Access to our SSH access via port 22"
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
      - IpProtocol: "tcp"
        FromPort: "22"
        ToPort: "22"
        CidrIp: "0.0.0.0/0"
      VpcId:
        Ref: "VPCParameter"
      Tags:
        - Key: "Name"
          Value: "InstanceSecurityGroup"

Outputs:
  # The intrinsic function Fn::GetAtt returns the value of an attribute from a resource in the template.
  # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html
  # Syntax for the full function name:
  # "Fn::GetAtt": [ logicalNameOfResource, attributeName ]
  # Syntax for the short form:
  # !GetAtt logicalNameOfResource.attributeName
  DNS:
    Description: "Public DNS name of the new EC2 instance"
    Value:
      Fn::GetAtt:
      - "Ec2Instance"
      - "PublicDnsName"

  # The intrinsic function Fn::Sub substitutes variables in an input string with values that you specify. In your templates,
  # you can use this function to construct commands or outputs that include values that aren't available until you create or update a stack.
  # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html
  # Syntax for the full function name:
  # "Fn::Sub":
  #   - String
  #   - { Var1Name: Var1Value, Var2Name: Var2Value }
  # Syntax for the short form:
  # !Sub
  #   - String
  #   - { Var1Name: Var1Value, Var2Name: Var2Value }
  KeyName:
    Description: "Simple Description KeyName"
    Value: !Sub |
      StackName: ${AWS::StackName}
      ${KeyName}.pem
      
  IP:
    Description: "Public IP address of the new EC2 instance"
    Value: !GetAtt "Ec2Instance.PublicIp"

  AvailabilityZone:
    Description: "Simple Description AvailabilityZone"
    Value:
      Fn::GetAtt:
      - "Ec2Instance"
      - "AvailabilityZone"

  # Fn::Select
  # The intrinsic function Fn::Select returns a single object from a list of objects by index.
  # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-select.html
  # Syntax for the full function name:
  # "Fn::Select": [ index, listOfObjects ] 
  # Syntax for the short form:
  # !Select [ index, listOfObjects ]
  # Eg. !Select [ "1", [ "apples", "grapes", "oranges", "mangoes" ] ]
  AllAZs:
    Description: "Simple Description AllAZs"
    Value: !Select [ '0', !GetAZs ]

  SecurityGroup:
    Description: "Simple Description SecurityGroup"
    Value:
      Fn::GetAtt:
      - "InstanceSecurityGroup"
      - "GroupId"

  # Pseudo Parameters Reference
  # Pseudo Parameters are parameters that are predefined by AWS CloudFormation. You do not declare them in your template.
  # Use them the same way as you would a parameter, as the argument for the Ref function.
  # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html
  StackName:
    Description: "Simple Description StackName"
    Value: !Ref "AWS::StackName"
  StackId:
    Description: "Simple Description StackId"
    Value: !Ref "AWS::StackId"
  Region:
    Description: "Simple Description Region"
    Value: !Ref "AWS::Region"
  AccountId:
    Description: "Simple Description AccountId"
    Value: !Ref "AWS::AccountId"

# You can use the optional Metadata section to include arbitrary JSON objects that provide details about the template.
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: "Network Settings"
      Parameters:
        - "KeyName"
        - "VPCParameter"
        - "SecurityGroupId"













